import json
from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.markdown import hbold

from utils import is_size_callback, is_payment_callback, is_support_callback, is_delivery_callback, get_product_content, get_args_from_message, is_support_message_confirmation_callback, Validators
from keyboards import get_delivery_keyboard, get_last_product_keyboard, get_confirmation_support_keyboard, get_payment_keyboard
from create_links import get_product_link_in_shop
from bs_parser import WebPageParser
from states import OrderClothes, PersonalDataForm, SupportForm
from config import PHYSICAL_SHOP_ADDRESS


router = Router()
parser = WebPageParser(debug=True, folder='products_json', can_upload_from_file=True)

##################### –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ #####################
async def process_start_command_or_callback(data: str, message: Message = None, state: FSMContext = None):
    """–õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –∏ callback –æ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    await state.set_state(OrderClothes.show_clothes)
    link_in_shop = get_product_link_in_shop(product_name=data)
    filename, product_json_str = parser.run(link_in_shop, save_to_file=True)
    product_json = json.loads(product_json_str)

    message_text, photoes, size_keyboard = get_product_content(product_json)
    if photoes:
        await message.answer_media_group(photoes)
    if not size_keyboard:
        message_text.append("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤.")
    await message.answer(message_text, parse_mode='HTML', reply_markup=size_keyboard)
    await state.set_state(OrderClothes.choose_size)

@router.message(CommandStart())
async def command_start_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    product_name = get_args_from_message(message)
    await state.clear() 
    await state.update_data(last_product_slug=product_name)
    await process_start_command_or_callback(product_name, message=message, state=state)

@router.callback_query(lambda c: c.data and c.data.startswith('get_product'))
async def process_start_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–∫–∏, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π –∫–æ–º–∞–Ω–¥—É /start —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º."""
    user_data = await state.get_data()
    product_name = user_data.get('last_product_slug')
    await process_start_command_or_callback(product_name, message=callback_query.message, state=state)
    await callback_query.answer()

@router.callback_query(is_size_callback)
async def process_size_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if "selected_size" in user_data:
        await callback_query.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ <b>—Ä–∞–∑–º–µ—Ä</b> —Ç–æ–≤–∞—Ä–∞.")
    else:
        selected_size = callback_query.data.replace('size_', '')
        await state.update_data(selected_size=selected_size)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        await callback_query.message.answer(
            text=f"<b>{selected_size}-–π</b> —Ä–∞–∑–º–µ—Ä, –æ—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ <b>—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>üí≤:",
            reply_markup=get_payment_keyboard()
        )
        await state.set_state(OrderClothes.choose_payment_method)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    await callback_query.answer()

    user_data = await state.get_data() # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_size = user_data.get('selected_size')
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã: {selected_size}")

@router.callback_query(is_payment_callback)
async def process_payment_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if "payment_method" in user_data:
        await callback_query.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ <b>—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>.")
    else:
        payment_method = callback_query.data.split('_')[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –∏–∑ callback_data
        await state.update_data(payment_method=payment_method)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        await callback_query.message.answer(f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã <b>{payment_method.capitalize()}</b> –≤—ã–±—Ä–∞–Ω.")
        await state.set_state(OrderClothes.choose_delivery_method)

    await callback_query.answer()
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ <b>—Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</b>", reply_markup=get_delivery_keyboard())

@router.callback_query(is_delivery_callback)
async def process_delivery_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if 'delivery_method' in user_data:
        await callback_query.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ <b>—Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏</b>: " + user_data["delivery_method"].replace('_', ' ').capitalize())
    else:
        delivery_method = callback_query.data  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ callback_data
        await state.update_data(delivery_method=delivery_method)
        await state.set_state(PersonalDataForm.wait_for_name)
        await callback_query.message.answer("–í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: " + delivery_method.replace('_', ' ').capitalize())
    await state.set_state(PersonalDataForm.wait_for_name)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>:")
    await callback_query.answer()
    
@router.message(PersonalDataForm.wait_for_name)
async def process_name(message: Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è """
    try:
        Validators.validate_name(message.text)
    except ValueError as e:
        await message.answer(str(e) + "\n" + "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>:")
        return 
    
    await state.update_data(name=message.text)
    await state.set_state(PersonalDataForm.wait_for_surname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")

@router.message(PersonalDataForm.wait_for_surname)
async def process_surname(message: Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–º–∏–ª–∏—é """
    try:
        Validators.validate_name(message.text)
    except ValueError as e:
        await message.answer(str(e) + "\n" + "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ñ–∞–º–∏–ª–∏—é</b>:")
        return 
    await state.update_data(surname=message.text)
    await state.set_state(PersonalDataForm.wait_for_email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>email</b>:")

@router.message(PersonalDataForm.wait_for_email)
async def process_email(message: Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∞–µ—Ç email """
    try:
        Validators.validate_email(message.text)
    except ValueError as e:
        await message.answer(str(e) + "\n" + "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>email</b>:")
        return 
    await state.update_data(email=message.text)
    await state.set_state(PersonalDataForm.wait_for_phone_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>:")

@router.message(PersonalDataForm.wait_for_phone_number)
async def process_phone_number(message: Message, state: FSMContext):
    try:
        Validators.validate_phone_number(message.text)
    except ValueError as e:
        await message.answer(str(e) + "\n" + "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>—Ç–µ–ª–µ—Ñ–æ–Ω</b>:")
        return
    await state.update_data(phone_number=message.text)
    
    # –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
    user_data = await state.get_data()
    print(user_data.get("delivery_method") )
    if user_data.get("delivery_method") == 'delivery_pickup':
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–∞–º–æ–≤—ã–≤–æ–∑, –≤—ã–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑ –ø–æ <b>–∞–¥—Ä–µ—Å—É</b>:\n' + PHYSICAL_SHOP_ADDRESS)
        await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    else:
        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∞–¥—Ä–µ—Å–∞
        await state.set_state(PersonalDataForm.wait_for_delivery_address)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å</b> –¥–æ—Å—Ç–∞–≤–∫–∏:")

@router.message(PersonalDataForm.wait_for_delivery_address)
async def process_delivery_address(message: Message, state: FSMContext):
    try:
        Validators.validate_address(message.text)
    except ValueError as e:
        await message.answer(str(e) + "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π <b>–∞–¥—Ä–µ—Å</b> –¥–æ—Å—Ç–∞–≤–∫–∏:")
        return
    
    # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(delivery_address=message.text)
    user_data = await state.get_data()
    
    # await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∏ <b>–¥–∞–Ω–Ω—ã–µ</b>:\n–ò–º—è: {user_data['name']}\n–§–∞–º–∏–ª–∏—è: {user_data['surname']}\n"
        f"Email: {user_data['email']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone_number']}\n"
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data['delivery_address']}\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!"
    )

@router.callback_query(is_support_callback)
async def process_support_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer('–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–∞–ª–µ–µ: ')
    await state.set_state(SupportForm.wait_for_message)

@router.message(SupportForm.wait_for_message)
async def process_support_message(message: Message, state: FSMContext):
    await state.update_data(support_message=message.text)
    await state.set_state(SupportForm.wait_for_confirmation)
    short_text = message.text[:40] + '...'
    keyboard = get_confirmation_support_keyboard()
    await message.answer(f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å: "{short_text}" ?', parse_mode='HTML', reply_markup=keyboard)

@router.callback_query(is_support_message_confirmation_callback)
async def process_support_confirm_message(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ç–æ–≤–∞—Ä—É."""
    await callback_query.message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ú—ã —Ä–µ—à–∏–º –µ–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    user_data = await state.get_data()
    keyboard = get_last_product_keyboard(product_name=user_data.get('last_product_slug'))
    await callback_query.message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ç–æ–≤–∞—Ä—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É —Ç–æ–≤–∞—Ä–∞ –Ω–∏–∂–µ...", reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(lambda c: c.data and c.data.startswith("last_product"))
async def process_last_product_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞."""
    user_data = await state.get_data()
    product_name = user_data.get('last_product_slug')
    await process_start_command_or_callback(product_name, callback_query=callback_query, state=state)
    await callback_query.answer()