from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from utils import Validators
from states import PersonalDataForm
from config import PHYSICAL_SHOP_ADDRESS

from aiogram import Router

personal_data_router = Router()

@personal_data_router.message(PersonalDataForm.wait_for_name)
async def process_name(message: Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ """
    try:
        Validators.validate_name(message.text)
    except ValueError as e:
        await message.answer(str(e) + "\n" + "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b> ‚úíÔ∏è:")
        return 
    
    await state.update_data(name=message.text)
    await state.set_state(PersonalDataForm.wait_for_surname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é‚úíÔ∏è:")

@personal_data_router.message(PersonalDataForm.wait_for_surname)
async def process_surname(message: Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏. """
    try:
        Validators.validate_name(message.text)
    except ValueError as e:
        await message.answer(str(e) + "\n" + "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ñ–∞–º–∏–ª–∏—é</b> ‚úíÔ∏è:")
        return 
    await state.update_data(surname=message.text)
    await state.set_state(PersonalDataForm.wait_for_email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>email</b>:")

@personal_data_router.message(PersonalDataForm.wait_for_email)
async def process_email(message: Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ email. """
    try:
        Validators.validate_email(message.text)
    except ValueError as e:
        await message.answer(str(e) + "\n" + "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>email</b> üìß:")
        return 
    await state.update_data(email=message.text)
    await state.set_state(PersonalDataForm.wait_for_phone_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>:")

@personal_data_router.message(PersonalDataForm.wait_for_phone_number)
async def process_phone_number(message: Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. """
    try:
        Validators.validate_phone_number(message.text)
    except ValueError as e:
        await message.answer(str(e) + "\n" + "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>—Ç–µ–ª–µ—Ñ–æ–Ω</b> üìû:")
        return
    await state.update_data(phone_number=message.text)
    
    user_data = await state.get_data()
    if user_data.get("delivery_method") == 'delivery_pickup':
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–∞–º–æ–≤—ã–≤–æ–∑, –≤—ã–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑ –ø–æ <b>–∞–¥—Ä–µ—Å—É</b> üß±:\n' + PHYSICAL_SHOP_ADDRESS)
        await state.clear()
    else:
        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∞–¥—Ä–µ—Å–∞
        await state.set_state(PersonalDataForm.wait_for_delivery_address)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å</b> –¥–æ—Å—Ç–∞–≤–∫–∏ üß±:")

@personal_data_router.message(PersonalDataForm.wait_for_delivery_address)
async def process_delivery_address(message: Message, state: FSMContext):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞. """
    try:
        Validators.validate_address(message.text)
    except ValueError as e:
        await message.answer(str(e) + "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π <b>–∞–¥—Ä–µ—Å</b> –¥–æ—Å—Ç–∞–≤–∫–∏ üß±:")
        return
    
    await state.update_data(delivery_address=message.text)
    user_data = await state.get_data()
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∏ <b>–¥–∞–Ω–Ω—ã–µ</b>:\n–ò–º—è: {user_data['name']}\n–§–∞–º–∏–ª–∏—è: {user_data['surname']}\n"
        f"Email: {user_data['email']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone_number']}\n"
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data['delivery_address']}\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!"
    )