from aiogram import Router
from aiogram import types
from aiogram.types import LabeledPrice
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold

from states import PaymentState
from payment import Payment
from config import PAYMENT_METHODS, DEBUG
from utils import is_payment_callback

payment_router = Router() 
payment = Payment()

@payment_router.callback_query(is_payment_callback)
async def process_pay_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å'."""
    await state.set_state(PaymentState.wait_for_payment)
    user_data = await state.get_data()
    
    payment_method = user_data.get('payment_method')
    if payment_method:
        readable_payment_method = PAYMENT_METHODS.get(payment_method, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥')
        payment_link = payment.get_payment_link()
        
        if DEBUG:
            await callback_query.message.answer(
                "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –æ–ø–ª–∞—Ç—ã.\n"
                f"–í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {hbold(readable_payment_method)}\n"
                f"–¢–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_link}\n\n"
            )
            await callback_query.message.answer("–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–∫—É–ø–∫—É üéÄ")
        else:
            # –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –æ–ø–ª–∞—Ç—ã
            prices = [LabeledPrice(label="–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä", amount=10000)] # 100.00 —Ä—É–±–ª–µ–π
            await callback_query.bot.send_invoice(
                chat_id=callback_query.from_user.id,
                title="–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
                description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
                provider_token=payment.get_provider_token(),
                currency="RUB",
                prices=prices,
                start_parameter="create_invoice_test",
                payload="Custom-Payload"
            )
    else:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.")

@payment_router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç Telegram."""
    await pre_checkout_query.bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@payment_router.message()
async def successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã."""
    if message.successful_payment:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
