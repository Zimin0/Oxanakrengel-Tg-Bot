import asyncio
import logging
import sys
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.markdown import hbold
import json
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Bot, types

from create_links import get_bot_link_with_arg, get_product_link_in_shop
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from bs_parser import WebPageParser
# from aiogram.dispatcher.filters import StateFilter


load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
dp = Dispatcher()

router = Router()
dp.include_router(router)
parser = WebPageParser(debug=True, folder='products_json')


class OrderClothes(StatesGroup):
    show_clothes = State()
    choose_size = State()
    choose_payment_method = State()
    get_personal_data = State()
    choose_delivery_method = State() 
    send_request_to_support = State()

class PersonalDataForm(StatesGroup):
    wait_for_name = State()
    wait_for_surname = State()
    wait_for_email = State()
    wait_for_phone_number = State()
    wait_for_delivery_address = State()


def get_args_from_message(message: Message) -> str:
    """ –î–æ—Å—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ —Å—Å—ã–ª–∫–µ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ ?start=... """
    parts = message.text.split(maxsplit=1)
    args = None
    if len(parts) > 1:
        args = parts[1]
    return args

def is_size_callback(callback_query: types.CallbackQuery) -> bool:
    """ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–∞–∑–º–µ—Ä–∞. """
    if callback_query.data:
        return callback_query.data.startswith('size_')
    return False

def get_delivery_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º –ø–æ –†–æ—Å—Å–∏–∏", callback_data="delivery_courier_russia")],
        [InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="delivery_pickup")],
        [InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º –ø–æ –ú–æ—Å–∫–≤–µ", callback_data="delivery_courier_moscow")]
    ])
    return keyboard

def get_payment_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ö–∞—Ä—Ç–∞ –†–§', callback_data='payment_card')],
        [InlineKeyboardButton(text='Paypal', callback_data='payment_paypal')]
    ])
    return keyboard

async def send_product_info(message: Message, product_info: dict):
    """ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ """
    message_text = (
        f"<b>{product_info['title']}</b>\n"
        f"–¶–µ–Ω–∞: <i>{product_info['price']}</i>\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {', '.join(product_info['sizes'])}\n"
        f"<a href='{product_info['url']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–≤–∞—Ä–µ</a>\n\n"
        f"{product_info['description']}"
    )
    
    buttons = []
    for size in product_info['sizes']:
        new_button = [InlineKeyboardButton(text=size, callback_data=f"size_{size}")] # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        buttons.append(new_button) 

    size_keyboard = InlineKeyboardMarkup(inline_keyboard=buttons) # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —ç—Ç–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    
    media = []
    for url in product_info['image_urls']:
        media.append(types.InputMediaPhoto(media=url))
    if media:
        await message.answer_media_group(media) # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –≤ –≤–∏–¥–µ –∞–ª—å–±–æ–º–∞
    
    await message.answer(message_text, parse_mode='HTML', reply_markup=size_keyboard) # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π


def is_payment_callback(callback_query: types.CallbackQuery) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ callback_query –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã."""
    return callback_query.data.startswith('payment_')

##################### –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ #####################
@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    """ –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π /start """
    await state.clear() 
    await state.set_state(OrderClothes.show_clothes)
    current_state = await state.get_state()
    print(current_state)
    await message.answer(hbold("–ò—â—É –≤–∞—à —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ..."))

    product_name = get_args_from_message(message)
    link_in_shop = get_product_link_in_shop(product_name)
    filename, product_json_str = parser.run(link_in_shop, save_to_file=True)  # –ü–æ–ª—É—á–∞–µ–º JSON –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    product_json = json.loads(product_json_str)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
    await send_product_info(message, product_json)
    await state.set_state(OrderClothes.choose_size)

@router.callback_query(is_size_callback)
async def process_size_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if "selected_size" in user_data:
        await callback_query.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")
    else:
        selected_size = callback_query.data.replace('size_', '')
        await state.update_data(selected_size=selected_size)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        await callback_query.message.answer(
            text=f"{selected_size}-–π —Ä–∞–∑–º–µ—Ä, –æ—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ <b>—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>üí≤:",
            reply_markup=get_payment_keyboard()
        )
        await state.set_state(OrderClothes.choose_payment_method)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    await callback_query.answer()

    user_data = await state.get_data() # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_size = user_data.get('selected_size')
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã: {selected_size}")

@router.callback_query(is_payment_callback)
async def process_payment_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if "payment_method" in user_data:
        await callback_query.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.")
    else:
        payment_method = callback_query.data.split('_')[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –∏–∑ callback_data
        await state.update_data(payment_method=payment_method)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        await callback_query.message.answer(f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã <b>{payment_method.capitalize()}</b> –≤—ã–±—Ä–∞–Ω.")
        await state.set_state(OrderClothes.choose_delivery_method)

    await callback_query.answer()
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_delivery_keyboard())

def is_delivery_callback(callback_query: types.CallbackQuery) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ callback_query –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏."""
    return callback_query.data.startswith("delivery_")

@router.callback_query(is_delivery_callback)
async def process_delivery_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if 'delivery_method' in user_data:
        await callback_query.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: " + user_data["delivery_method"].replace('_', ' ').capitalize())
    else:
        delivery_method = callback_query.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ callback_data
        await state.update_data(delivery_method=delivery_method)
        await state.set_state(PersonalDataForm.wait_for_name)
        await callback_query.message.answer("–í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: " + delivery_method.replace('_', ' ').capitalize())
    await state.set_state(PersonalDataForm.wait_for_name)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await callback_query.answer()
    
# –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
@router.message(PersonalDataForm.wait_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(PersonalDataForm.wait_for_surname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")

# –ó–∞–ø—Ä–æ—Å —Ñ–∞–º–∏–ª–∏–∏
@router.message(PersonalDataForm.wait_for_surname)
async def process_surname(message: Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await state.set_state(PersonalDataForm.wait_for_email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")

# –ó–∞–ø—Ä–æ—Å email
@router.message(PersonalDataForm.wait_for_email)
async def process_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await state.set_state(PersonalDataForm.wait_for_phone_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

# –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(PersonalDataForm.wait_for_phone_number)
async def process_phone_number(message: Message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    await state.set_state(PersonalDataForm.wait_for_delivery_address)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")

# –ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@router.message(PersonalDataForm.wait_for_delivery_address)
async def process_delivery_address(message: Message, state: FSMContext):
    await state.update_data(delivery_address=message.text)
    user_data = await state.get_data()
    await state.clear()
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {user_data['name']}\n–§–∞–º–∏–ª–∏—è: {user_data['surname']}\nEmail: {user_data['email']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone_number']}\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data['delivery_address']}\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –º—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!")


async def main() -> None:
    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())